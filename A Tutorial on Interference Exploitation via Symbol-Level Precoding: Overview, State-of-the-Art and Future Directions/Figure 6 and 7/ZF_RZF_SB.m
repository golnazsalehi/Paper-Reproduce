SEP_12 = Both_Methods(12,12,10000);
QPSK_SB_Non_Strict = SB_PSK(12,12,2000,4,1);
QPSK_SB_Strict = SB_PSK(12,12,2000,4,2);


snr = 0:2:40;
semilogy(snr,SEP_12(1,:),'b--v','linewidth',1.5)
hold on
semilogy(snr,SEP_12(2,:),'r--d','linewidth',1.5)
semilogy(snr,QPSK_SB_Non_Strict,'g--s','linewidth',1.5)
semilogy(snr,QPSK_SB_strict,'m--o','linewidth',1.5)

xlabel('SNR (dB)');ylabel('SER')
legend('ZF-QPSK','RZF-QPSK','CI-Non-Strict-QPSK','CI-Strict-QPSK')

%%
function  SEP = Both_Methods(K,M,N)
    interval = 0:2:40;
    SNR = 10.^((interval)/10);
    N0_vector = 1./SNR;
    SEP = zeros(2,length(SNR));
    for i = 1:length(SNR)
    
       
        for j = 1:N
            x = randsrc(K,1,0:3);
            u = qammod(x,4);
            H = (randn(K,M)+1i*randn(K,M))*sqrt(0.5); % channel
    
    
            alpha = K*N0_vector(i);
            w = sqrt(N0_vector(i)/2)*(randn(1,K)+1i*randn(1,K)); % noise
            w = w.';
    
            s_ChInv = H\u;
            s_ChInv = s_ChInv/sqrt(s_ChInv'*s_ChInv);
    
            s_ReInv =H'/(H*H'+alpha*eye(K))*u;
            s_ReInv = s_ReInv/sqrt(s_ReInv'*s_ReInv);
    
            y_ChInv = H*s_ChInv + w;
            y_ReInv = H*s_ReInv + w;
            
    
            u_ChInv = qamdemod(y_ChInv,4);
            
            u_ReInv = qamdemod(y_ReInv,4);
    
            SEP(1,i) = SEP(1,i) + sum(x ~= u_ChInv);
            SEP(2,i) = SEP(2,i) + sum(x ~= u_ReInv);
        end
    end
    SEP = SEP./(N*M);
end

function  SEP = SB_PSK(K,M,N,n,mode)
    % mode = 1 -> Non-Strict
    % mode = 2 -> Strict
    interval = 0:2:40;
    SNR = 10.^((interval)/10);
    N0_vector = 1./SNR;
    SEP = zeros(1,length(SNR));
    P0 = 1;
    if n == 8
        pskModulator = comm.PSKModulator;
        pskDemodulator = comm.PSKDemodulator;
    elseif n == 16
        pskModulator = comm.PSKModulator(16);
        pskDemodulator = comm.PSKDemodulator(16);

    end

    for i = 1:length(SNR)
        for j = 1:N

            x = randsrc(K,1,0:n-1);
            if n == 4
                u = qammod(x,n);
            else
                u = pskModulator(x);
            end

            H = (randn(K,M)+1i*randn(K,M))*sqrt(0.5); % channel
            X = SLP_PSK(H,u,K,M,n,P0,mode);
            w = sqrt(N0_vector(i)/2)*(randn(1,K)+1i*randn(1,K)); % noise
            w = w.';
            y_CI = H*X + w;

            if n == 4
                u_CI = qamdemod(y_CI,n);
            else
                u_CI = pskDemodulator(y_CI);
            end
            SEP(i) = SEP(i) + sum(x ~= u_CI);
           
        end
    end
    SEP = SEP./(N*M);

end



function [x]= SLP_PSK(H,s,K,Nt,M,P0,mode)
    if mode == 1
        cvx_begin
            variable lambda(K) complex;
            variable x(Nt) complex;
            variable t;
            minimize(-t);
            subject to 
                H*x == lambda.*s;
                (real(lambda)-t)*tan(pi/M) >= abs(imag(lambda));
                norm(x,2) <= sqrt(P0);
        cvx_end
    elseif mode == 2
        cvx_begin
            variable lambda(K);
            variable x(Nt) complex;
            variable t;
            minimize(-t);
            subject to 
                H*x == lambda.*s;
                lambda >= t;
                norm(x,2) <= sqrt(P0);
        cvx_end

    end
end