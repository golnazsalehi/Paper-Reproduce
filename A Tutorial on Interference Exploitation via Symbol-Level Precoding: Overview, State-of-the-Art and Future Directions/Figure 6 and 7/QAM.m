
SEP = SB_QAM(12,12,10,16);

function  SEP = SB_QAM(K,M,N,n)
    interval = 0:5:40;
    P0 = 1;
    SNR = 10.^((interval)/10);
    N0_vector = 1./SNR;
    SEP = zeros(1,length(SNR));

    for i = 1:length(SNR)
       
        for j = 1:N

            x = randsrc(K,1,0:n-1);
            u = qammod(x,n);
            H = (randn(K,M)+1i*randn(K,M))*sqrt(0.5); % channel
            
            if n == 16
                O_map = [[1 1]; [1 0]; [1 1]; [1 0];...
                          [0 1]; [0 0]; [0 1];[0 0];...
                          [1 1]; [1 0]; [1 1]; [1 0];...
                          [0 1]; [0 0]; [0 1];[0 0]];
                O = O_map(x+1,:)';
                O = O(:);
            elseif n== 64
                list1 = [0,4,32,36];
                list2 = [1,2,3,5,6,7,33,34,35,37,38,39];
                list3 = [8,24,16,48,56,40,12,28,20,52,60,44];

                O = [];
                for p = 1:length(x)
                    if find(list1 == x(i)) 
                        O = [O; [1 1]];
                    elseif find(list2 == x(i))
                        O = [O; [1 0]];
                    elseif find(list3 == x(i))
                        O = [O; [0 1]];
                    else
                        O = [O; [0 0]];
                    end   
                end
                O = O';
                O = O(:);
            end

            X = SLP_QAM(H,P0,u,O,K,M);
            w = sqrt(N0_vector(i)/2)*(randn(1,K)+1i*randn(1,K)); % noise
            w = w.';

            y_CI = H*X + w;
            u_CI = qamdemod(y_CI,n);
            SEP(i) = SEP(i) + sum(x ~= u_CI);
           
        end
    end
    SEP = SEP./(N*M);

end



function [x]= SLP_QAM(H,P0,s,O,K,Nt)

    o = zeros(sum(O),length(O));
    List = find(O);
    for k = 1:sum(O)
        o(k,List(k)) = 1;
    end

    I = ~O;
    i = zeros(sum(I),length(I));
    List = find(I);
    for j = 1:sum(I)
        i(j,List(j)) = 1;
    end 


    A = eye(K);
    B = [1 1];
    T = kron(A,B);
    
    S = [real(s),1i*imag(s)]'; s_E = S(:);
    
    cvx_begin
        variable Phi(K*2,1); 
        variable x(Nt) complex;
        variable t;

        minimize(-t);
        subject to 
            H*x == T*diag(Phi)*s_E;
            o*Phi >= t;
            i*Phi == t;
            norm(w*s) <= sqrt(P0);
    cvx_end

    end