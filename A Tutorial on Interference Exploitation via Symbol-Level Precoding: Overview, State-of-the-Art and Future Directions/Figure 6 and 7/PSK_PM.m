QPSK = PM_PSK(12,12,100,4);

function  SEP = PM_PSK(K,M,N,n)
    interval = 10:5:35;
    SINR = 10.^((interval)/10);
    N0 = 1;
    SEP = zeros(1,length(SINR));

    if n == 8
        pskModulator = comm.PSKModulator;
        pskDemodulator = comm.PSKDemodulator;
    elseif n == 16
        pskModulator = comm.PSKModulator(16);
        pskDemodulator = comm.PSKDemodulator(16);

    end

    for i = 1:length(SINR)
        for j = 1:N

            x = randsrc(K,1,0:n-1);
            if n == 4
                u = qammod(x,n);
            else
                u = pskModulator(x);
            end

            H = (randn(K,M)+1i*randn(K,M))*sqrt(0.5); % channel
            X = SLP_PSK(H,u,K,M,SINR(i),N0,n);
            w = sqrt(N0/2)*(randn(1,K)+1i*randn(1,K)); % noise
            w = w.';
            y_CI = H*X + w;

            if n == 4
                u_CI = qamdemod(y_CI,n);
            else
                u_CI = pskDemodulator(y_CI);
            end
            SEP(i) = SEP(i) + sum(x ~= u_CI);
           
        end
    end
    SEP = SEP./(N*M);

end



function [x]= SLP_PSK(H,s,K,Nt,SINR,N0,M)
    cvx_begin
        variable lambda(K) complex;
        variable x(Nt) complex;
        minimize(norm(x,2));
        subject to 
            H*x == lambda.*s;
            (real(lambda)-sqrt(SINR*N0))*tan(pi/M) >= abs(imag(lambda));
            
    cvx_end
    end